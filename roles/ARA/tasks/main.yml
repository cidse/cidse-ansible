- name: Install ara apt packages
  apt:
    state: present
    name: "{{ ara_apt_packages }}"
# become: true 
  delegate_to: 127.0.0.1

- name: Install ara pip packages
  pip:
    state: present
    name: "{{ ara_pip_packages }}"
#  become: true 
  delegate_to: 127.0.0.1

- name: Get ara root dir location
  command: python -m ara.setup.path
  register: ara_location  

- name: Get ara callback plugins path
  command: python -m ara.setup.callback_plugins
  register: ara_cb_plugins_location  

- name: Get ara action plugins path
  command: python -m ara.setup.action_plugins
  register: ara_a_plugins_location 

- name: Get ara library path
  command: python -m ara.setup.library
  register: ara_library_location 

#- name: Create plugins folder in playbook directory if it doesn't exist
#  file:
#    path: "{{ playbook_dir }}/plugins/callback"
#    recurse: yes
#    state: directory

#- name: Copy ara callback plugin to openebs custom plugins location
#  copy: 
#    src: "{{ ara_location.stdout }}/plugins/callbacks/"  
#    dest: "{{ playbook_dir }}/plugins/callback" 

#- name: Copy ara action plugins to openebs custom plugins location
#  copy:
#    src: "{{ ara_location.stdout }}/plugins/actions/"
#    dest: "{{ playbook_dir }}/plugins"

- name: Update ansible.cfg with callback plugin path
  ini_file:
    path: "{{ playbook_dir }}/ansible.cfg"
    section: defaults
    option: callback_plugins
    value: "{{ ara_cb_plugins_location.stdout }}"

- name: Update ansible.cfg with ara action plugins path
  ini_file:
    path: "{{ playbook_dir }}/ansible.cfg"
    section: defaults
    option: action_plugins
    value: "{{ ara_a_plugins_location.stdout }}"

- name: Update ansible.cfg with ara library path
  ini_file:
    path: "{{ playbook_dir }}/ansible.cfg"
    section: defaults
    option: library
    value: "{{ ara_library_location.stdout }}"

- name: Update ansible.cfg with ara notification callback
  ini_file:
    path: "{{ playbook_dir }}/ansible.cfg"
    section: defaults
    option: notification_callback 
    value: "ara"

- name: Install apache
  apt:
    state: present
    name: "{{ ara_apache_packages }}"
  become: true 

- name: Enable and start apache
  systemd:
    name: apache2
    enabled: yes
    state: started

# Create the directory for Ansible and ARA
# This directory is where we will store the files that Apache will need to read and write to.
- name: Mkdir for Ansible/ara for apache
  file:
    path: "/var/www/ara"
    recurse: yes
    state: directory

# The location where ara-wsgi is installed depends on how you installed ARA and the distribution you are running. You can use 'which' to find where it is located
# Salty old linux admin warning: Not all systems support 'which', you may also need to utilize 'command -v'
- name: Get ARA WSGI location
  command: which ara-wsgi
  register: ara_wsgi_location  

# ARA provides a WSGI script when it is installed: ara-wsgi. We need to copy it to the directory we just created, /var/www/ara.
- name: Copy ARA WSGI to web dir
  copy:
    src: "{{ ara_wsgi_location.stdout }}"
    dest: "/var/www/ara/"

- name: Create Ansible/ARA configuration
# The defaults provided by ARA and Ansible are not suitable for a use case where we are deploying with Apache. We need to provide different settings
# For additional parameters, such as the database location or backend, look at the configuration documentation
# https://ara.readthedocs.io/en/stable/configuration.html#configuration-parameter-ara
  copy:
    src: ansible.cfg
    dest: "/var/www/ara/ansible.cfg"
    
# Make sure everything is owned by Apache so it can read and write to the directory
- name: Apache file permissions
  file:
    path: /var/www/ara
    owner: www-data
    group: www-data
    mode: 0777
    recurse: yes

# Set up the Apache virtual host at /etc/apache2/sites-available/ara.conf
# Restart apache if needed
- name: Apache virtual host config
  template: 
    src: ara.conf.j2
    dest: /etc/apache2/sites-available/ara.conf
  notify: "restart apache"

- name: Enable ara site
  command: a2ensite ara